The problem statement is to find the most optimum way to tender the exact change to your customers using the least number of coins. 
For example, if the available coins are [1, 2, 5, 8, 10] and the change to be given is 7, then the most optimum way to tender the exact
change would be [2, 5].

This problem can be solved using dynamic programming. Dynamic programming is a technique to solve problems by breaking them down into
smaller subproblems and solving each subproblem only once. The solution to the original problem is then obtained by combining
the solutions to the subproblems.

The greedy algorithm is another approach to solve this problem. A greedy algorithm is an algorithmic paradigm that follows
the problem-solving heuristic of making the locally optimal choice at each stage with the hope of finding a global optimum.
In the case of the coin change problem, the greedy algorithm works by selecting the largest coin denomination that is less than
or equal to the remaining change at each step. This process is repeated until the remaining change is zero.

However, the greedy algorithm does not always produce the optimal solution. For example, consider the coin denominations [1, 3, 4] and
the change to be given is 6. The greedy algorithm would select the coins [4, 1, 1] which uses three coins. However, the optimal solution
is [3, 3] which uses only two coins.

Dynamic programming helps in this case by solving the subproblems optimally and avoiding the pitfalls of the greedy algorithm. 
The dynamic programming approach involves creating a table to store the minimum number of coins required to make change for each
value from 0 to the target value. The table is filled in a bottom-up manner by considering all possible coin denominations for each value.
The final answer is then obtained from the table for the target value.

Regarding the bonus question, given a number N, we need to remove one digit and print the largest possible number.
For example, if N is 2945, then the largest possible number after removing one digit would be 945. To solve this problem,
we can iterate over each digit of the number and remove it one by one. We can then compare the resulting numbers and return 
the largest one. In the example you provided, the largest possible numbers after removing one digit are:

234
945
973
954
9374
